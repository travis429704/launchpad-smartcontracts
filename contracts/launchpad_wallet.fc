#include "imports/stdlib.fc";
#include "errors.fc";
#include "op-code.fc";

;; launchpad address, owner address, token address, reward amount, ton invested amount

(slice, slice, slice, int, int) load_data() inline {
    slice ds = get_data().begin_parse();
    return (ds~load_msg_addr(), ds~load_msg_addr(), ds~load_msg_addr(), ds~load_coins(), ds~load_coins());
}

() save_data(slice launchpad_address, slice owner_address, slice token_address, int reward_amount, int ton_invested_amount) impure inline {
    set_data(begin_cell()
            .store_slice(launchpad_address)
            .store_slice(owner_address)
            .store_slice(token_address)
            .store_coins(reward_amount)
            .store_coins(ton_invested_amount)
            .end_cell()
    );
} 

() add_reward(slice in_msg_body, slice sender_address) impure inline {
    (slice launchpad_address, slice owner_address, slice token_address, int reward_amount, int ton_invested_amount) = load_data();
    throw_unless(ONLY_OWNER, equal_slices(sender_address, launchpad_address));

    int query_id = in_msg_body~load_uint(64);
    int amount = in_msg_body~load_coins();

    reward_amount += amount;
    save_data(launchpad_address, owner_address, token_address, reward_amount, ton_invested_amount);
}

() withdraw_reward(slice in_msg_body, slice sender_address) impure inline {
    (slice launchpad_address, slice owner_address, slice token_address, int reward_amount, int ton_invested_amount) = load_data();
    throw_unless(ONLY_OWNER, equal_slices(sender_address, launchpad_address));

    int query_id = in_msg_body~load_uint(64);
    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_uint(op::withdraw_reward, 32)
            .store_uint(query_id, 64)
            .store_coins(reward_amount)
            .end_cell();
    send_raw_message(msg, 64);

    reward_amount = 0;
    save_data(launchpad_address, owner_address, token_address, reward_amount, ton_invested_amount);
}

() refund(slice in_msg_body, slice sender_address) impure inline {
    (slice launchpad_address, slice owner_address, slice token_address, int reward_amount, int ton_invested_amount) = load_data();
    throw_unless(ONLY_OWNER, equal_slices(sender_address, launchpad_address));

    int query_id = in_msg_body~load_uint(64);
    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_uint(op::refund, 32)
            .store_uint(query_id, 64)
            .store_coins(reward_amount)
            .store_coins(ton_invested_amount)
            .end_cell();
    send_raw_message(msg, 64);

    reward_amount = 0;
    ton_invested_amount = 0;
    save_data(launchpad_address, owner_address, token_address, reward_amount, ton_invested_amount);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if(in_msg_body.slice_empty?()) {
        return();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    (slice launchpad_address, slice owner_address, slice token_address, int reward_amount, int ton_invested_amount) = load_data();
    if(op == op::add_reward) {
        add_reward(in_msg_body, sender_address);
    } elseif(op == op::withdraw_reward) {
        withdraw_reward(in_msg_body, sender_address);
    } elseif(op == op::refund) {
        refund(in_msg_body, sender_address);
    } else {
        throw(UNKNOWN_OP);
    }
}

(int, int) get_invested_info() method_id {
    (_, _, _, int reward_amount, int ton_invested_amount) = load_data();
    return (reward_amount, ton_invested_amount);
}



